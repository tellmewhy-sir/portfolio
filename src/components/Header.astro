---
let menuLinks = [
  {
    title: 'design',
    href: '/design',
    isActive: false,
  },
  {
    title: 'me',
    href: '/about',
    isActive: false,
  },
  {
    title: 'dev',
    href: '/',
    isActive: true,
  },
  {
    title: 'blog',
    href: '/blog',
    isActive: false,
  },
  {
    title: 'contact',
    href: '/contact',
    isActive: false,
  },
];
const isEven = menuLinks.length % 2 === 0;
---

<header
  id="header"
  class="flex items-center"
  transition:persist
  transition:name="menu"
>
  <h1 id="title" class="title">delutilo.</h1>
  <nav transition:persist>
    <ul class={`menu ${isEven ? 'is-even' : ''}`}>
      {
        menuLinks.map((link, index) => (
          <li
            class={`menu-item ${link.isActive ? 'active' : ''}`}
            data-order={index}
          >
            <a href={link.href}>{link.title}</a>
            {/* {link.title} */}
          </li>
        ))
      }
      <span transition:persist class="slider" id="slider"></span>
    </ul>
  </nav>
</header>

<script is:inline src="helpers/animation.js"></script>

<script>
  document.addEventListener('astro:page-load', () => {
    let header = document.getElementById('header');
    let nav = document.querySelector('nav');
    let title = document.getElementById('title');
    let menu = document.querySelector('.menu');
    let menuItems = document.querySelectorAll('.menu-item');
    let activeItem = document.querySelector('.menu-item.active');
    let slider = document.getElementById('slider');

    function fadeOutTitle() {
      title.classList.add('exit');
    }

    let navDistanceFromTitle = title.offsetTop - nav.offsetTop;

    setTimeout(() => {
      if (activeItem) {
        // highlightMenuItem(slider, activeItem);
        menu.style.pointerEvents = 'auto';
      }
    }, 1000);

    menuItems.forEach((item) => {
      item.addEventListener('click', () => {
        menu.style.pointerEvents = 'none';
        if (item.classList.contains('active')) return;

        activeItem.classList.remove('active');
        item.classList.add('active');

        let distanceFromTitle = Math.abs(item.offsetTop - navDistanceFromTitle);

        let itemOrder = parseInt(item.dataset.order);
        let activeItemOrder = parseInt(activeItem.dataset.order);

        if (itemOrder > activeItemOrder) {
          distanceFromTitle = -distanceFromTitle;
        }

        nav.style.transform = `translateY(${distanceFromTitle}px)`;

        activeItem = item;
        // menu.style.pointerEvents = 'auto';
      });

      item.addEventListener('mouseover', () => {
        highlightMenuItem(slider, item);
      });
    });

    nav.addEventListener('mouseleave', () => {
      highlightMenuItem(slider, activeItem);
    });
  });
</script>

<style>
  h1 {
    font-family: 'RaglotDemo', sans-serif;
    font-size: 4rem;
    line-height: 1;
    text-align: center;
    z-index: 5;
  }

  nav {
    margin-left: -2rem;
    position: relative;
    transition: all 0.25s;
  }

  /* .title {
    transition: all 0.5s ease-out;
    &.exit {
      transform: translateX(-50%);
      opacity: 0;
    }
  } */

  @starting-style {
    .menu-item {
      visibility: hidden;
      opacity: 0;
    }
  }

  .menu {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
    &:hover {
      .menu-item:not(.active) {
        visibility: visible;
        opacity: 0.5;
      }
    }

    &.is-even {
      transform: translateY(calc(-1rem));
    }
  }

  .menu-item {
    /* display: none; */
    visibility: hidden;
    z-index: 5;
    font-family: 'RaglotDemo', sans-serif;
    font-size: 4rem;
    line-height: 1;
    margin: 0 1rem;
    cursor: pointer;
    transition:
      opacity 0.25s,
      visibility 0.25s;
    transition-behavior: allow-discrete;
    opacity: 0;
    @apply px-8;

    &:hover {
      color: white;
      opacity: 1 !important;
    }

    &.active {
      visibility: visible;
      opacity: 1;
    }
  }

  .slider {
    position: absolute;
    transition: all 0.25s;
    animation: 500ms ease-in 500ms grow;
    @apply bg-gray-400 rounded-full;
  }

  @keyframes grow {
    from {
      transform: scaleX(0);
    }
    to {
      transform: scaleX(100%);
    }
  }
</style>
